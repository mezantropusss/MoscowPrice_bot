from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import pandas as pd
import joblib
import logging
import re
import os
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "8086258501:AAHK59i3QHR0OGrx9wTAXLEd4Y4Z5qK7wDY"
UNCERTAINTY = 0.10  # 10% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
MAX_REASONABLE_PRICE = 300_000_000
MIN_REASONABLE_PRICE = 1_500_000
PRICE_ADJUSTMENT_FACTOR_MOSCOW = 1.2  # –î–ª—è –ú–æ—Å–∫–≤—ã
PRICE_ADJUSTMENT_FACTOR_MO = 1.08      # –î–ª—è –ú–û

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FSM
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
class Form(StatesGroup):
    region = State()
    apt_type = State()
    renovation = State()
    district = State()
    station = State()
    time = State()
    rooms = State()
    area = State()
    floor = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
try:
    os.makedirs('artifacts', exist_ok=True)
    model = joblib.load('artifacts/catboost_model.pkl')
    scaler = joblib.load('artifacts/scaler.pkl')
    
    metro_freq_series = pd.read_csv('artifacts/metro_freq.csv', header=None, index_col=0).squeeze()
    metro_freq = {}
    for station, freq in metro_freq_series.items():
        key = station.lower().translate(str.maketrans('', '', string.punctuation)).replace(' ', '')
        metro_freq[key] = freq
    
    logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(metro_freq)} —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ")
    
    avg_freq = sum(metro_freq.values()) / len(metro_freq) if metro_freq else 0
    logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ —Å—Ç–∞–Ω—Ü–∏–π: {avg_freq:.4f}")
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    raise SystemExit("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞")

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
district_map = {
    '–¶–ê–û (—Ü–µ–Ω—Ç—Ä)': ['–¢–≤–µ—Ä—Å–∫–∞—è', '–ü—É—à–∫–∏–Ω—Å–∫–∞—è', '–û—Ö–æ—Ç–Ω—ã–π –†—è–¥', '–ß–µ—Ö–æ–≤—Å–∫–∞—è', '–ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç', '–õ—É–±—è–Ω–∫–∞'],
    '–°–í–ê–û (—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫)': ['–í–î–ù–•', '–ë–∞–±—É—à–∫–∏–Ω—Å–∫–∞—è', '–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π –°–∞–¥', '–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∞—è', '–†–∏–∂—Å–∫–∞—è', '–ú–µ–¥–≤–µ–¥–∫–æ–≤–æ'],
    '–Æ–í–ê–û (—é–≥–æ-–≤–æ—Å—Ç–æ–∫)': ['–í—ã—Ö–∏–Ω–æ', '–õ—é–±–ª–∏–Ω–æ', '–ü–æ–∫—Ä—ã—à–∫–∏–Ω–∞', '–ö—É–∑—å–º–∏–Ω–∫–∏', '–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏', '–†—è–∑–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç'],
    '–ó–ê–û (–∑–∞–ø–∞–¥)': ['–°–ª–∞–≤—è–Ω—Å–∫–∏–π –±—É–ª—å–≤–∞—Ä', '–ö—É–Ω—Ü–µ–≤—Å–∫–∞—è', '–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è', '–§–∏–ª–∏', '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è', '–ö–∏–µ–≤—Å–∫–∞—è'],
    '–•–∏–º–∫–∏': ['–ü–ª–∞–Ω–µ—Ä–Ω–∞—è', '–†–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª', '–•–æ–≤—Ä–∏–Ω–æ', '–ë–µ–ª–æ–º–æ—Ä—Å–∫–∞—è', '–•–∏–º–∫–∏ (–≥–æ—Ä–æ–¥)'],
    '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫': ['–ú—è–∫–∏–Ω–∏–Ω–æ', '–ü—è—Ç–Ω–∏—Ü–∫–æ–µ —à–æ—Å—Å–µ', '–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫–∞—è', '–¢—É—à–∏–Ω—Å–∫–∞—è'],
    '–ú—ã—Ç–∏—â–∏': ['–ú–µ–¥–≤–µ–¥–∫–æ–≤–æ', '–ë—É–ª—å–≤–∞—Ä –î–º–∏—Ç—Ä–∏—è –î–æ–Ω—Å–∫–æ–≥–æ', '–ë–∏–±–∏—Ä–µ–≤–æ', '–ê–ª—Ç—É—Ñ—å–µ–≤–æ']
}

reno_map = {
    '–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞': 'No repair',
    '–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π': 'Cosmetic',
    '–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç': 'Euro'
}

back_btn = types.KeyboardButton(text='üîô –ù–∞–∑–∞–¥')
reset_btn = types.KeyboardButton(text='üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ')

@dp.message(lambda m: m.text == reset_btn.text)
async def on_reset(message: types.Message, state: FSMContext):
    await state.clear()
    return await cmd_start(message, state)

@dp.message(Command(commands=['start', 'restart']))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='–ú–æ—Å–∫–≤–∞'), types.KeyboardButton(text='–ú–û')],
            [reset_btn]
        ],
        resize_keyboard=True
    )
    await message.answer('üèôÔ∏è <b>–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:', 
                         reply_markup=kb, parse_mode='HTML')
    await state.set_state(Form.region)

@dp.message(StateFilter(Form.region))
async def process_region(message: types.Message, state: FSMContext):
    if message.text not in ['–ú–æ—Å–∫–≤–∞', '–ú–û']:
        return await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.')
    await state.update_data(region=1 if message.text == '–ú–æ—Å–∫–≤–∞' else 0)

    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞'), types.KeyboardButton(text='–í—Ç–æ—Ä–∏—á–∫–∞')],
            [back_btn, reset_btn]
        ],
        resize_keyboard=True
    )
    await message.answer('üè† –¢–∏–ø –∂–∏–ª—å—è:', reply_markup=kb)
    await state.set_state(Form.apt_type)

@dp.message(StateFilter(Form.apt_type))
async def process_apt_type(message: types.Message, state: FSMContext):
    if message.text == back_btn.text:
        return await cmd_start(message, state)
    if message.text not in ['–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–í—Ç–æ—Ä–∏—á–∫–∞']:
        return await message.answer('–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.')
    await state.update_data(apt_type=1 if message.text == '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞' else 0)

    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='–ë–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞'),
             types.KeyboardButton(text='–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π'),
             types.KeyboardButton(text='–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç')],
            [back_btn, reset_btn]
        ],
        resize_keyboard=True
    )
    await message.answer('üõ†Ô∏è –¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞:', reply_markup=kb)
    await state.set_state(Form.renovation)

@dp.message(StateFilter(Form.renovation))
async def process_renovation(message: types.Message, state: FSMContext):
    if message.text == back_btn.text:
        return await process_apt_type(message, state)
    if message.text not in reno_map:
        return await message.answer('–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.')
    await state.update_data(renovation=message.text)

    data = await state.get_data()
    opts = (
        ['–¶–ê–û (—Ü–µ–Ω—Ç—Ä)', '–°–í–ê–û (—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫)', '–Æ–í–ê–û (—é–≥–æ-–≤–æ—Å—Ç–æ–∫)', '–ó–ê–û (–∑–∞–ø–∞–¥)']
        if data['region'] == 1
        else ['–•–∏–º–∫–∏', '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫', '–ú—ã—Ç–∏—â–∏']
    )
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=o)] for o in opts] + [[back_btn, reset_btn]],
        resize_keyboard=True
    )
    await message.answer('üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:', reply_markup=kb)
    await state.set_state(Form.district)

@dp.message(StateFilter(Form.district))
async def process_district(message: types.Message, state: FSMContext):
    if message.text == back_btn.text:
        return await process_renovation(message, state)
    if message.text not in district_map:
        return await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.')
    
    await state.update_data(district=message.text)

    stations = district_map.get(message.text, [])
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (—á–∞—Å—Ç–æ—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏)
    top_stations = sorted(
        stations, 
        key=lambda s: metro_freq.get(
            s.lower().translate(str.maketrans('', '', string.punctuation)).replace(' ', ''), 
            0
        ), 
        reverse=True
    )[:6]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    rows = []
    for i in range(0, len(top_stations), 2):
        row = top_stations[i:i+2]
        rows.append([types.KeyboardButton(text=name) for name in row])
    
    rows.append([types.KeyboardButton(text='‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é')])
    rows.append([back_btn, reset_btn])

    kb = types.ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)
    await message.answer('üöá –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ:', reply_markup=kb)
    await state.set_state(Form.station)

@dp.message(StateFilter(Form.station))
async def process_station(message: types.Message, state: FSMContext):
    txt = message.text
    if txt == back_btn.text:
        return await process_district(message, state)
    if txt == reset_btn.text:
        return await on_reset(message, state)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
    if txt == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é':
        kb = types.ReplyKeyboardMarkup(keyboard=[[back_btn, reset_btn]], resize_keyboard=True)
        await message.answer('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ:', reply_markup=kb)
        return  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ (–∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
    station_norm = txt.lower().translate(str.maketrans('', '', string.punctuation)).replace(' ', '')
    station_freq = metro_freq.get(station_norm, 0)
    
    # –ï—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —á–∞—Å—Ç–æ—Ç—É
    if station_freq == 0:
        avg_freq = sum(metro_freq.values()) / len(metro_freq)
        station_freq = avg_freq
        logger.warning(f"–°—Ç–∞–Ω—Ü–∏—è '{txt}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞: {avg_freq:.4f}")
    
    await state.update_data(
        station=txt,
        station_freq=station_freq
    )
    
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='1-5 –º–∏–Ω'), types.KeyboardButton(text='6-10 –º–∏–Ω')],
            [types.KeyboardButton(text='11-15 –º–∏–Ω'), types.KeyboardButton(text='15+ –º–∏–Ω')],
            [back_btn, reset_btn]
        ],
        resize_keyboard=True
    )
    await message.answer('‚è±Ô∏è –ú–∏–Ω—É—Ç –¥–æ –º–µ—Ç—Ä–æ:', reply_markup=kb)
    await state.set_state(Form.time)

@dp.message(StateFilter(Form.time))
async def process_time(message: types.Message, state: FSMContext):
    if message.text == back_btn.text:
        return await process_station(message, state)
    t = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    time_display = t.replace(' –º–∏–Ω', '')  # –£–±–∏—Ä–∞–µ–º "–º–∏–Ω" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    try:
        if '-' in t:
            parts = t.split('-')
            lo = int(parts[0])
            hi = int(parts[1].replace('+', '').replace(' –º–∏–Ω', ''))
            minutes = (lo + hi) / 2
        elif t.endswith('+ –º–∏–Ω') or t.endswith('+'):
            minutes = int(t.replace('+ –º–∏–Ω', '').replace(' –º–∏–Ω', '').replace('+', '')) + 10
        else:
            minutes = float(t.replace(',', '.').replace(' –º–∏–Ω', ''))
    except (ValueError, IndexError):
        return await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.')
            
    await state.update_data(minutes=minutes, time_display=time_display)

    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text='1 –∫–æ–º–Ω–∞—Ç–∞'), types.KeyboardButton(text='2 –∫–æ–º–Ω–∞—Ç—ã')],
            [types.KeyboardButton(text='3 –∫–æ–º–Ω–∞—Ç—ã'), types.KeyboardButton(text='4+ –∫–æ–º–Ω–∞—Ç—ã')],
            [types.KeyboardButton(text='‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é')],
            [back_btn, reset_btn]
        ],
        resize_keyboard=True
    )
    await message.answer('üö™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:', reply_markup=kb)
    await state.set_state(Form.rooms)

@dp.message(StateFilter(Form.rooms))
async def process_rooms(message: types.Message, state: FSMContext):
    if message.text == back_btn.text:
        return await process_time(message, state)
    txt = message.text
    if txt == '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é':
        kb = types.ReplyKeyboardMarkup(keyboard=[[back_btn, reset_btn]], resize_keyboard=True)
        return await message.answer('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç:', reply_markup=kb)
    
    try:
        if txt.isdigit():
            rooms = int(txt)
        elif txt == '4+ –∫–æ–º–Ω–∞—Ç—ã':
            rooms = 4
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            match = re.search(r'\d+', txt)
            if not match:
                raise ValueError
            rooms = int(match.group())
            
        if rooms < 1 or rooms > 10:
            raise ValueError
    except (ValueError, AttributeError):
        return await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.')
    
    await state.update_data(rooms=rooms)

    kb = types.ReplyKeyboardMarkup(keyboard=[[back_btn, reset_btn]], resize_keyboard=True)
    await message.answer('üìè –í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –º¬≤:', reply_markup=kb)
    await state.set_state(Form.area)

@dp.message(StateFilter(Form.area))
async def process_area(message: types.Message, state: FSMContext):
    if message.text == back_btn.text:
        return await process_rooms(message, state)
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        area = float(message.text.replace(',', '.'))
        if area < 10 or area > 500:
            raise ValueError
    except ValueError:
        return await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 500 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 45.5).')
    await state.update_data(area=area)

    kb = types.ReplyKeyboardMarkup(keyboard=[[back_btn, reset_btn]], resize_keyboard=True)
    await message.answer('üè¢ –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã:', reply_markup=kb)
    await state.set_state(Form.floor)

@dp.message(StateFilter(Form.floor))
async def process_floor(message: types.Message, state: FSMContext):
    if message.text == back_btn.text:
        return await process_area(message, state)
    try:
        floor = int(message.text)
        if floor < 0 or floor > 100:
            raise ValueError
    except ValueError:
        return await message.answer('–≠—Ç–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100.')

    data = await state.get_data()

    # –°–≤–æ–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    summary = (
        f"üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"‚Ä¢ –†–µ–≥–∏–æ–Ω: <b>{'–ú–æ—Å–∫–≤–∞' if data['region'] == 1 else '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'}</b>\n"
        f"‚Ä¢ –¢–∏–ø –∂–∏–ª—å—è: <b>{'–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞' if data['apt_type'] == 1 else '–í—Ç–æ—Ä–∏—á–∫–∞'}</b>\n"
        f"‚Ä¢ –†–µ–º–æ–Ω—Ç: <b>{data['renovation']}</b>\n"
        f"‚Ä¢ –†–∞–π–æ–Ω: <b>{data['district']}</b>\n"
        f"‚Ä¢ –°—Ç–∞–Ω—Ü–∏—è: <b>{data.get('station', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
        f"‚Ä¢ –ú–∏–Ω—É—Ç –¥–æ –º–µ—Ç—Ä–æ: <b>{data.get('time_display', data.get('minutes', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'))}</b>\n"
        f"‚Ä¢ –ö–æ–º–Ω–∞—Ç: <b>{data['rooms']}</b>\n"
        f"‚Ä¢ –ü–ª–æ—â–∞–¥—å: <b>{data['area']} –º¬≤</b>\n"
        f"‚Ä¢ –≠—Ç–∞–∂: <b>{floor}</b>"
    )
    await message.answer(summary, parse_mode='HTML')

    # –ì–æ—Ç–æ–≤–∏–º DataFrame –¥–ª—è –º–æ–¥–µ–ª–∏
    try:
        required_keys = ['region', 'apt_type', 'station_freq', 'minutes', 'rooms', 'area']
        for key in required_keys:
            if key not in data:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö: {key}")
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {key}")
        
        df = pd.DataFrame([{
            'Region': data['region'],
            'Apartment type': data['apt_type'],
            'Metro station': data['station_freq'],
            'Minutes to metro': data['minutes'],
            'Number of rooms': data['rooms'],
            'Area': data['area'],
            'Floor': floor
        }])

        # One-hot –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞
        selected = reno_map.get(data['renovation'], 'No repair')
        for feat in model.feature_names_:
            if feat.startswith('reno_'):
                df[feat] = 1 if feat == f'reno_{selected}' else 0

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        for feat in model.feature_names_:
            if feat not in df.columns:
                df[feat] = 0
        df = df[model.feature_names_]

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        numerical = ['Minutes to metro', 'Number of rooms', 'Area', 'Floor']
        df_scaled = df.copy()
        df_scaled[numerical] = scaler.transform(df_scaled[numerical])
        X = df_scaled.values

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        pred_rub = model.predict(X)[0]
        logger.info(f"–ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {pred_rub:.2f} —Ä—É–±–ª–µ–π")
        
        # –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –¶–ï–ù –° –£–ß–ï–¢–û–ú –†–ï–ì–ò–û–ù–ê
        region_factor = PRICE_ADJUSTMENT_FACTOR_MOSCOW if data['region'] == 1 else PRICE_ADJUSTMENT_FACTOR_MO
        pred_rub *= region_factor
        logger.info(f"–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ({region_factor}x): {pred_rub:.2f} —Ä—É–±–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ü–µ–Ω—É
        if pred_rub > MAX_REASONABLE_PRICE or pred_rub < MIN_REASONABLE_PRICE:
            logger.warning(f"–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {pred_rub:.2f} —Ä—É–±.")
            response = "‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
        else:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            low_rub = max(MIN_REASONABLE_PRICE, pred_rub * (1 - UNCERTAINTY))
            hi_rub = min(MAX_REASONABLE_PRICE, pred_rub * (1 + UNCERTAINTY))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            low_millions = low_rub / 1_000_000
            hi_millions = hi_rub / 1_000_000
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ü–µ–Ω–µ
            if low_millions < 10:
                price_range = f"{low_millions:.2f}-{hi_millions:.2f} –º–ª–Ω ‚ÇΩ"
            else:
                price_range = f"{low_millions:.1f}-{hi_millions:.1f} –º–ª–Ω ‚ÇΩ"
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = (
                f"üí∞ <b>–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã</b>\n\n"
                f"‚Ä¢ <b>–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</b> {price_range}\n"
                f"‚Ä¢ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> {pred_rub / 1_000_000:.2f} –º–ª–Ω ‚ÇΩ\n\n"
                f"<i>–î–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å —Ä–∏–µ–ª—Ç–æ—Ä–æ–º.</i>"
            )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}", exc_info=True)
        response = '‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.'

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb = types.ReplyKeyboardMarkup(keyboard=[[reset_btn]], resize_keyboard=True)
    await message.answer(response, reply_markup=kb, parse_mode='HTML')
    await state.clear()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}", exc_info=True)
    try:
        await update.message.answer("‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start", 
                                   parse_mode='HTML')
    except:
        pass
    return True

if __name__ == '__main__':
    import asyncio
    async def main():
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            logger.info(f"üîß –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ú–æ—Å–∫–≤—ã: {PRICE_ADJUSTMENT_FACTOR_MOSCOW}")
            logger.info(f"üîß –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ú–û: {PRICE_ADJUSTMENT_FACTOR_MO}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        await dp.start_polling(bot, skip_updates=True)
    asyncio.run(main())